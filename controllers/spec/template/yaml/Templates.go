package yaml 

 // This file is auto generated by the script in 'WriteYamlTemplatesInGoFile.go'. 
 // Any manual modification to this file will be lost during next compilation. 

const (
BackUpCronJobTemplate = `apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-job-postgres-name
spec:

  # Corn format: https://en.wikipedia.org/wiki/Cron
  schedule: "* */1 * * *"

  concurrencyPolicy: Forbid

  jobTemplate:
    spec:
      template:
        spec:

          restartPolicy: OnFailure

          volumes:
            - name: backup-volume
              persistentVolumeClaim:
                claimName: backup-pvc-postgres-name

            - name: postgres-config
              configMap:
                name: base-kubegres-config
                defaultMode: 0777

          containers:
            - name: backup-postgres
              image: postgres:latest
              imagePullPolicy: IfNotPresent
              args:
                - sh
                - -c
                - /tmp/backup_database.sh

              volumeMounts:
                - name: backup-volume
                  mountPath: toBeReplaced

                - name: postgres-config
                  mountPath: /tmp/backup_database.sh
                  subPath: backup_database.sh

              env:
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: toBeReplaced
                      key: superUserPassword

                - name: KUBEGRES_RESOURCE_NAME
                  value: toBeReplaced

                - name: BACKUP_DESTINATION_FOLDER
                  value: toBeReplaced

                - name: BACKUP_SOURCE_DB_HOST_NAME
                  value: toBeReplaced
`
BaseConfigMapTemplate = `apiVersion: v1
kind: ConfigMap
metadata:
  name: base-kubegres-config
  namespace: default

# This is the base configuration for all Kubegres resources. It is automatically created by the Kubernetes operator.
# It is created once for each namespace and it applies to all Kubegres resources on that namespace.
#
# Please do not remove any config and script in this file because they are referenced in the resources configured by the operator.
#
# If you would like to override shared configs by all Kubegres resources, this is the right place to edit.
#
# If you would like to override a configuration for a specific Kubegres resource only, create your custom configMap
# and there you can add any of the following data keys which will override the base one:
# - postgres.conf
# - primary_init_script.sh
# - backup_database.sh
# - pg_hba.conf
# In your Kubegres resource file, set the name of your custom configMap in 'spec.customConfig'.
#
# Note that, in your custom configMap, you cannot override these data keys:
# - primary_create_replication_role.sh
# - copy_primary_data_to_replica.sh
# - promote_replica_to_primary.sh
# We highly recommend that you do not modify these 3 data keys as it could break the operator.

data:

  # This is the standard Postgres config applying to Primary and Replica servers.
  # You can edit this config as it suits your requirement.
  #
  # Be careful with the value you set for 'listen_addresses' because you could break the operator.
  #
  # By default, PostgreSql set the property 'wal_level' to 'replica'. You can modify the value of 'wal_level' in here.
  # Kubegres was tested with "wal_level = replica" and "wal_level = logical".
  #
  # If you edit the config in this file, your changes will apply to all Kubegres resources.
  # Alternatively, you can override it for your Kubegres resource. To do so, create a custom configMap and in your
  # Kubegres resource file set its name in 'spec.customConfig'. In your ConfigFile, copy the contents of this script
  # and edit it as its suits your requirement.
  #
  postgres.conf: |

    # Replication configs
    listen_addresses = '*'
    max_wal_senders = 10
    max_connections = 100
    shared_buffers = 128MB

    # Logging
    #log_destination = 'stderr,csvlog'
    #logging_collector = on
    #log_directory = 'pg_log'
    #log_filename= 'postgresql-%Y-%m-%d_%H%M%S.log'


  # This bash script is run once, the 1st time a Primary PostgreSql container is created. It is run in the Primary container only.
  #
  # You can edit this script as it suits your requirement. For example, you could add SQL statements to create specific
  # database(s), user(s), grant accesses, etc...
  # See the commented examples in the script below.
  #
  # This script will be located in the container folder "/docker-entrypoint-initdb.d"
  # That folder is referenced in the Postgres Docker page: https://hub.docker.com/_/postgres
  #
  # If you edit the script in this file, your changes will apply to all Kubegres resources.
  # Alternatively, you can override it for your Kubegres resource. To do so, create a custom configMap and in your
  # Kubegres resource file set its name in 'spec.customConfig'. In your ConfigFile, copy the contents of this script
  # and edit it as its suits your requirement.
  #
  primary_init_script.sh: |
    #!/bin/bash
    set -e

    # This script assumes that the env-var $POSTGRES_MYAPP_PASSWORD contains the password of the custom user to create.
    # You can add any env-var in your Kubegres resource config YAML.

    #dt=$(date '+%d/%m/%Y %H:%M:%S');
    #echo "$dt - Running init script the 1st time Primary PostgreSql container is created...";

    #customDatabaseName="my_app"
    #customUserName="my_username"

    #echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username $POSTGRES_USER --dbname $POSTGRES_DB ...";

    #psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    #CREATE DATABASE $customDatabaseName;
    #CREATE USER $customUserName WITH PASSWORD '$POSTGRES_MYAPP_PASSWORD';
    #\connect $customDatabaseName;
    #CREATE TABLE account(user_id serial PRIMARY KEY, username VARCHAR (50) NOT NULL);
    #INSERT INTO account VALUES (1, 'username1');
    #INSERT INTO account VALUES (2, 'username2');
    #GRANT ALL PRIVILEGES ON DATABASE "$customDatabaseName" to $customUserName;
    #GRANT ALL ON "account" to $customUserName;
    #EOSQL

    #echo "$dt - Init script is completed";


  # If you enabled back-up for your Kubegres resource, this bash script backs-up a Postgres database into a given destination-volume.
  # It is triggered to run regularly by a Kubernetes Cronjob.
  #
  # It runs in a Replica container in order to not impact the performance of Primary. If there is no Replica then it runs in a Primary container.
  #
  # You can edit this script as it suits your requirement.
  #
  # If you edit the script in this file, your changes will apply to all Kubegres resources.
  # Alternatively, you can override it for your Kubegres resource. To do so, create a custom configMap and in your
  # Kubegres resource file set its name in 'spec.customConfig'. In your ConfigFile, copy the contents of this script
  # and edit it as its suits your requirement.
  #
  backup_database.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    fileDt=$(date '+%d_%m_%Y_%H_%M_%S');
    backUpFileName="$KUBEGRES_RESOURCE_NAME-backup-$fileDt.gz"
    backUpFilePath="$BACKUP_DESTINATION_FOLDER/$backUpFileName"

    echo "$dt - Starting DB backup of Kubegres resource $KUBEGRES_RESOURCE_NAME into file: $backUpFilePath";
    echo "$dt - Running: pg_dumpall -h $BACKUP_SOURCE_DB_HOST_NAME -U postgres -c | gzip > $backUpFilePath"

    pg_dumpall -h $BACKUP_SOURCE_DB_HOST_NAME -U postgres -c | gzip > $backUpFilePath

    if [ $? -ne 0 ]; then
      rm $backUpFilePath
      echo "Unable to execute a BackUp. Please check DB connection settings"
      exit 1
    fi

    echo "$dt - DB backup completed for Kubegres resource $KUBEGRES_RESOURCE_NAME into file: $backUpFilePath";


  # This is the standard Postgres host-based authentication (hba) config applying to Primary and Replica servers.
  # https://www.postgresql.org/docs/current/auth-pg-hba-conf.html
  #
  # You can edit this config as it suits your requirement.
  # However, please be careful if you change the rules below for 'replication' database & role
  # as it could break PostgreSql's ability to replicate.
  #
  # If you edit the config in this file, your changes will apply to all Kubegres resources.
  # Alternatively, you can override it for your Kubegres resource. To do so, create a custom configMap and in your
  # Kubegres resource file set its name in 'spec.customConfig'. In your ConfigFile, copy the contents of this script
  # and edit it as its suits your requirement.
  #
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    # Replication connections by a user with the replication privilege
    host    replication     replication     all                     md5
    # As long as it is authenticated, all connections allowed except from "0.0.0.0/0"
    local   all             all                                     md5
    host    all             all             all                     md5
    host    all             all             0.0.0.0/0               reject


  # -----------------------------------------------------------------------------------------------
  # From here, you cannot override the configs below in a custom ConfigMap
  # ------------


  # This script creates a replication role in charge of replicating data from Primary to Replica PostgreSql instances.
  # It is executed once, the 1st time a Primary PostgreSql container is created.
  # It is run in Primary container.
  #
  # If you modify this script, there is a risk of breaking the operator.
  #
  # This script will be located in the folder "/docker-entrypoint-initdb.d"
  # That folder is referenced in the Postgres Docker page: https://hub.docker.com/_/postgres
  #
  primary_create_replication_role.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Creating replication role...";
    echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username $POSTGRES_USER --dbname $POSTGRES_DB ... CREATE ROLE replication WITH REPLICATION PASSWORD ... GRANT EXECUTE ON FUNCTION pg_promote TO replication;";

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE ROLE replication WITH REPLICATION PASSWORD '$POSTGRES_REPLICATION_PASSWORD' LOGIN;
    GRANT EXECUTE ON FUNCTION pg_promote TO replication;
    EOSQL

    echo "$dt - Replication role created";


  # This script replicates data from the Primary PostgreSql to the Replica database.
  # It is executed once, the 1st time a Replica PostgreSql container is created.
  # It is run in Replica containers.
  #
  # If you modify this script, there is a risk of breaking the operator.
  #
  # This script will be located in the folder "/tmp"
  #
  copy_primary_data_to_replica.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Attempting to copy Primary DB to Replica DB...";

    if [ -z "$(ls -A $PGDATA)" ]; then

        echo "$dt - Copying Primary DB to Replica DB folder: $PGDATA";
        echo "$dt - Running: pg_basebackup -R -h $PRIMARY_HOST_NAME -D $PGDATA -P -U replication;";

        pg_basebackup -R -h $PRIMARY_HOST_NAME -D $PGDATA -P -U replication;

        if [ $UID == 0 ]
        then
        chown -R postgres:postgres $PGDATA;
        fi

        echo "$dt - Copy completed";

    else
        echo "$dt - Skipping copy from Primary DB because Replica DB already exists";
    fi


  # This script promotes a Replica to a Primary by creating a trigger-file signaling PostgreSql to start the promotion process.
  # It is executed once, when a Replica is set to become a Primary.
  # It is run in a selected Replica container by the operator.
  #
  # If you modify this script, there is a risk of breaking the operator.
  #
  # This script will be located in the folder "/tmp"
  promote_replica_to_primary.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Attempting to promote a Replica PostgreSql to Primary...";

    standbyFilePath="$PGDATA/standby.signal"

    if [ ! -f "$standbyFilePath" ]; then
      echo "$dt - Skipping as this PostgreSql is already a Primary since the file '$standbyFilePath' does not exist."
      exit 0
    fi

    promotionTriggerFilePath="$PGDATA/promote_replica_to_primary.log"

    if [ -f "$promotionTriggerFilePath" ]; then
      echo "$dt - Skipping as the promotion trigger file '$promotionTriggerFilePath' already exists"
      exit 0
    fi

    echo "$dt - Promoting by creating the promotion trigger file: '$promotionTriggerFilePath'"
    touch $promotionTriggerFilePath

`
PrimaryServiceTemplate = `apiVersion: v1
kind: Service
metadata:
  name: postgres-name
  namespace: default
  labels:
    app: postgres-name
    replicationRole: primary
spec:
  clusterIP: None
  ports:
    - protocol: TCP
      port: 5432
  selector:
    app: postgres-name
    replicationRole: primary
`
PrimaryStatefulSetTemplate = `apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-name-0
  namespace: default
  labels:
    app: postgres-name
    index: '1'
    replicationRole: primary

spec:
  serviceName: "postgres-name"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-name
      index: '1'

  volumeClaimTemplates:
    - metadata:
        name: postgres-db
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 1Gi

  template:
    metadata:
      labels:
        app: postgres-name
        index: '1'
        replicationRole: primary

    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: base-config
          configMap:
            name: base-kubegres-config
            defaultMode: 0777

        - name: custom-config
          configMap:
            name: toBeReplaced
            defaultMode: 0777

      containers:
        - name: postgres-name-0
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          args: ["-c", "config_file=/etc/postgres.conf", "-c", "hba_file=/etc/pg_hba.conf"]

          ports:
            - containerPort: 5432
              protocol: TCP

          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP

          startupProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -h $POD_IP
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1

          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            failureThreshold: 10
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 15

          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3

          volumeMounts:
            - name: postgres-db
              mountPath: toBeReplaced

            - name: base-config
              mountPath: /docker-entrypoint-initdb.d/primary_create_replication_role.sh
              subPath: primary_create_replication_role.sh

            - name: base-config
              mountPath: /etc/postgres.conf
              subPath: postgres.conf

            - name: base-config
              mountPath: /docker-entrypoint-initdb.d/primary_init_script.sh
              subPath: primary_init_script.sh

            - name: base-config
              mountPath: /etc/pg_hba.conf
              subPath: pg_hba.conf
`
ReplicaServiceTemplate = `apiVersion: v1
kind: Service
metadata:
  name: postgres-name-replica
  namespace: default
  labels:
    app: postgres-name
    replicationRole: replica
spec:
  clusterIP: None
  ports:
    - protocol: TCP
      port: 5432
  selector:
    app: postgres-name
    replicationRole: replica
`
ReplicaStatefulSetTemplate = `apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-name-1
  namespace: default
  labels:
    app: postgres-name
    index: '2'
    replicationRole: replica

spec:
  serviceName: "postgres-replica-name"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-name
      index: '2'

  volumeClaimTemplates:
    - metadata:
        name: postgres-db
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 1Gi

  template:
    metadata:
      labels:
        app: postgres-name
        index: '2'
        replicationRole: replica

    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: base-config
          configMap:
            name: base-kubegres-config
            defaultMode: 0777

        - name: custom-config
          configMap:
            name: toBeReplaced
            defaultMode: 0777

      initContainers:
        - name: setup-replica-data-directory
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PRIMARY_HOST_NAME
            - name: PGPASSWORD
            - name: PGDATA

          command:
            - sh
            - -c
            - /tmp/copy_primary_data_to_replica.sh

          volumeMounts:
            - name: postgres-db
              mountPath: toBeReplaced

            - name: base-config
              mountPath: /tmp/copy_primary_data_to_replica.sh
              subPath: copy_primary_data_to_replica.sh

      containers:
        - name: postgres-name-1
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          args: ["-c", "config_file=/etc/postgres.conf", "-c", "hba_file=/etc/pg_hba.conf", "-c", "promote_trigger_file=$(PGDATA)/promote_replica_to_primary.log"]

          ports:
            - containerPort: 5432
              protocol: TCP

          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP

          startupProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U $POSTGRES_USER -h $POD_IP
            failureThreshold: 15
            initialDelaySeconds: 10
            periodSeconds: 60
            successThreshold: 1

          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            failureThreshold: 10
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 15

          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U postgres -h $POD_IP
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3

          volumeMounts:
            - name: postgres-db
              mountPath: toBeReplaced

            - name: base-config
              mountPath: /etc/postgres.conf
              subPath: postgres.conf

            - name: base-config
              mountPath: /etc/pg_hba.conf
              subPath: pg_hba.conf
`
)
